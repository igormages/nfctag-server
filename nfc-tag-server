#!/usr/bin/env ruby
require 'rubygems'
require 'nfc'
require 'eventmachine'
require 'em-websocket'
require 'evma_httpserver'
require 'ArgsParser'

parser = ArgsParser.parser
parser.bind(:http_port, :hp, 'HTTP port', 8080)
parser.bind(:websocket_port, :wp, 'WebSocket port', 8081)
parser.bind(:socket_port, :sp, 'TCP Socket port', 8082)
parser.bind(:help, :h, 'show help')
first, params = parser.parse ARGV

if parser.has_option(:help)
  puts parser.help
  puts "e.g.  ruby nfc-tag-server --http_port 8080 --websocket_port 8081"
  exit 1
end

@@tag = nil
@@channel = EM::Channel.new

class NfcHttpServer  < EM::Connection
  include EM::HttpServer
  
  def process_http_request
    res = EM::DelegatedHttpResponse.new(self)
    puts "* http #{@http_request_method} #{@http_path_info} #{@http_query_string} #{@http_post_content}"
    res.headers['Access-Control-Allow-Origin'] = '*'
    res.headers['Access-Control-Allow-Headers'] = 'Content-Type'
    res.headers['Access-Control-Allow-Methods'] = 'PUT,DELETE,POST,GET,OPTIONS'
    res.status = 200
    res.content = @@tag
    res.send_response
  end
end

class NfcSocketServer < EM::Connection
  def post_init
    @sid = @@channel.subscribe do |mes|
      send_data "#{mes}\n"
    end
    puts "* new socket client <#{@sid}>"
  end

  def receive_data mes
    return if mes.strip.size < 1
    puts "* socket client <#{@sid}> says : #{mes}"
  end

  def unbind
    @@channel.unsubscribe @sid
    puts "* socket client <#{@sid}> closed"
  end
end


EM::run do
  EM::start_server('0.0.0.0', params[:http_port].to_i, NfcHttpServer)
  puts "start HTTP server - port #{params[:http_port].to_i}"

  EM::start_server('0.0.0.0', params[:socket_port].to_i, NfcSocketServer)
  puts "start TCP Socket server - port #{params[:socket_port].to_i}"

  EM::WebSocket.start(:host => '0.0.0.0', :port => params[:websocket_port].to_i) do |ws|
    ws.onopen do
      sid = @@channel.subscribe do |mes|
        ws.send mes
      end
      puts "* new websocket client <#{sid}> connected"
      ws.send @@tag
      ws.onmessage do |mes|
        puts "* websocket client <#{sid}> says : #{mes}"
      end

      ws.onclose do
        @@channel.unsubscribe sid
        puts "* websocket client <#{sid}> closed"
      end
    end
  end
  puts "start WebSocket server - port #{params[:websocket_port].to_i}"

  EM::defer do
    nfc = NFC.instance
    puts "reader : #{nfc.device.name}"
    loop do
      tag = nfc.find.to_s.downcase
      if tag != @@tag
        puts "tag : #{tag}"
        @@channel.push tag.to_s
        @@tag = tag
      end
      sleep 0.1
    end
  end
end
